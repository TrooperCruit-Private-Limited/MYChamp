@page
@model MYChamp.Pages.Consultee_Pages.ReportModel
@{
    ViewData["Title"] = "Reports And Dashboard";
}

<style>
    .chart-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        background-color: floralwhite;
    }

        .chart-container div {
            flex: 1 1 45%;
            margin: 10px;
            min-width: 300px;
        }

    .chart {
        width: 100% !important;
        height: auto !important;
    }

</style>
<h2 class="text-center m-4">@ViewData["Title"]</h2>
<br />
<br />

<div class="chart-container">
    <div>
        <h3>Total Duration and Cost Over Time</h3>
        <div id="totalDurationCostChart" class="chart"></div>
    </div>
    <div>
        <h3>User-Specific Duration and Cost</h3>
        <div id="userDurationCostChart" class="chart"></div>
    </div>
    <div>
        <h3>Daily Usage Summary</h3>
        <div id="dailyUsageChart" class="chart"></div>
    </div>
    <div>
        <h3>Insightful Information</h3>
        <div id="insightfulChart" class="chart"></div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        async function fetchChartData(url) {
            const response = await fetch(url);
            return await response.json();
        }

        async function renderCharts() {
            // Chart 1: Total Duration and Cost Over Time
            const totalDurationCostData = await fetchChartData('/Consultee_Pages/Report?handler=TotalDurationCostData');
            const totalDurationCostDates = totalDurationCostData.map(entry => new Date(entry.date).toLocaleDateString());
            const totalDurations = totalDurationCostData.map(entry => entry.totalDuration);
            const totalCosts = totalDurationCostData.map(entry => entry.totalCost);

            Plotly.newPlot('totalDurationCostChart', [
                {
                    x: totalDurationCostDates,
                    y: totalDurations,
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'Total Duration (hours)',
                    line: { color: 'blue' }
                },
                {
                    x: totalDurationCostDates,
                    y: totalCosts,
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'Total Cost ($)',
                    line: { color: 'red' }
                }
            ]);

            // Chart 2: User-Specific Duration and Cost
            const userDurationCostData = await fetchChartData('/Consultee_Pages/Report?handler=UserDurationCostData');
            const userIds = userDurationCostData.map(entry => `User ${entry.consulteeId}`);
            const userDurations = userDurationCostData.map(entry => entry.totalDuration);
            const userCosts = userDurationCostData.map(entry => entry.totalCost);

            Plotly.newPlot('userDurationCostChart', [
                {
                    x: userIds,
                    y: userDurations,
                    type: 'bar',
                    name: 'Total Duration (hours)',
                    marker: { color: 'blue' }
                },
                {
                    x: userIds,
                    y: userCosts,
                    type: 'bar',
                    name: 'Total Cost ($)',
                    marker: { color: 'red' }
                }
            ]);

            // Chart 3: Daily Usage Summary
            const dailyUsageData = await fetchChartData('/Consultee_Pages/Report?handler=DailyUsageData');
            const dailyUsageDates = dailyUsageData.map(entry => new Date(entry.date).toLocaleDateString());
            const dailyUsers = dailyUsageData.map(entry => entry.totalUsers);

            Plotly.newPlot('dailyUsageChart', [
                {
                    x: dailyUsageDates,
                    y: dailyUsers,
                    type: 'bar',
                    name: 'Total Users',
                    marker: { color: 'purple' }
                }
            ]);

            // Chart 4: Additional Insightful Information
            const insightfulData = await fetchChartData('/Consultee_Pages/Report?handler=InsightfulData');
            const insightfulLabels = insightfulData.map(entry => entry.label);
            const insightfulValues = insightfulData.map(entry => entry.value);

            Plotly.newPlot('insightfulChart', [
                {
                    labels: insightfulLabels,
                    values: insightfulValues,
                    type: 'pie'
                }
            ]);
        }

        document.addEventListener('DOMContentLoaded', renderCharts);
    </script>
}