@page
@model MYChamp.Pages.Consultee_Pages.ReportModel
@{
    ViewData["Title"] = "Reports And Dashboard";
}

<style>
    .outer-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 20px;
    }

    .inner-container {
        width: 100%;
        max-width: 800px;
        margin: 10px 0;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .chart {
        width: 100%;
        height: 400px;
    }
</style>

<h2 class="text-center m-4">@ViewData["Title"]</h2>

<div class="outer-container">
    <div class="inner-container">
        <div class="form-group">
            <label for="userSelect">Select User:</label>
            <select id="userSelect" class="form-control"></select>
        </div>
        <div class="form-group">
            <label for="yearSelect">Select Year:</label>
            <select id="yearSelect" class="form-control"></select>
        </div>
        <div>
            <h3>Monthly Duration and Cost</h3>
            <div id="monthlyDurationCostChart" class="chart"></div>
        </div>
    </div>
    <br />
    <div class="inner-container">
        <div class="form-group">
            <label for="userSelect2">Select User:</label>
            <select id="userSelect2" class="form-control"></select>
        </div>
        <div class="form-group">
            <label for="yearSelect2">Select Year:</label>
            <select id="yearSelect2" class="form-control"></select>
        </div>
        <div>
            <h3>Monthly Bill Payment Status</h3>
            <div id="monthlyBillStatusChart" class="chart"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        const allMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        function ensureAllMonths(data, valueFields) {
            const dataMap = new Map(data.map(entry => [entry.month, entry]));

            return allMonths.map(month => {
                if (dataMap.has(month)) {
                    return dataMap.get(month);
                } else {
                    const emptyEntry = { month };
                    valueFields.forEach(field => emptyEntry[field] = 0);
                    return emptyEntry;
                }
            });
        }

        async function fetchChartData(url) {
            const response = await fetch(url);
            return await response.json();
        }

        async function renderCharts() {
            const userId = document.getElementById('userSelect').value;
            const year = document.getElementById('yearSelect').value;
            await fetchAndRenderMonthlyData(userId, year);

            const userId2 = document.getElementById('userSelect2').value;
            const year2 = document.getElementById('yearSelect2').value;
            await fetchAndRenderMonthlyData(userId2, year2);
        }

        async function fetchAndRenderMonthlyData(userId, year) {
            let monthlyDurationCostData = await fetchChartData(`/Consultee_Pages/Report?handler=MonthlyDurationCostData&userId=${userId}&year=${year}`);
            monthlyDurationCostData = ensureAllMonths(monthlyDurationCostData, ['totalDuration', 'totalCost']);
            const months = monthlyDurationCostData.map(entry => entry.month);
            const totalDurations = monthlyDurationCostData.map(entry => entry.totalDuration);
            const totalCosts = monthlyDurationCostData.map(entry => entry.totalCost);

            Plotly.newPlot('monthlyDurationCostChart', [
                {
                    x: months,
                    y: totalDurations,
                    type: 'bar',
                    name: 'Total Duration (hours)',
                    marker: { color: 'blue' }
                },
                {
                    x: months,
                    y: totalCosts,
                    type: 'bar',
                    name: 'Total Cost ($)',
                    marker: { color: 'red' }
                }
            ]);

            let monthlyBillStatusData = await fetchChartData(`/Consultee_Pages/Report?handler=MonthlyBillStatusData&userId=${userId}&year=${year}`);
            monthlyBillStatusData = ensureAllMonths(monthlyBillStatusData, ['paidAmount', 'unpaidAmount']);
            const billMonths = monthlyBillStatusData.map(entry => entry.month);
            const paidAmounts = monthlyBillStatusData.map(entry => entry.paidAmount);
            const unpaidAmounts = monthlyBillStatusData.map(entry => entry.unpaidAmount);

            Plotly.newPlot('monthlyBillStatusChart', [
                {
                    x: billMonths,
                    y: paidAmounts,
                    type: 'bar',
                    name: 'Paid Amount ($)',
                    marker: { color: 'green' }
                },
                {
                    x: billMonths,
                    y: unpaidAmounts,
                    type: 'bar',
                    name: 'Unpaid Amount ($)',
                    marker: { color: 'red' }
                }
            ]);
        }

        document.getElementById('userSelect').addEventListener('change', renderCharts);
        document.getElementById('yearSelect').addEventListener('change', renderCharts);
        document.getElementById('userSelect2').addEventListener('change', renderCharts);
        document.getElementById('yearSelect2').addEventListener('change', renderCharts);

        async function initializeDropdowns() {
            const users = await fetchChartData('/Consultee_Pages/Report?handler=Users');
            const years = await fetchChartData('/Consultee_Pages/Report?handler=Years');

            const userSelect = document.getElementById('userSelect');
            users.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = user.name;
                userSelect.appendChild(option);
            });

            const yearSelect = document.getElementById('yearSelect');
            years.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect.appendChild(option);
            });

            const userSelect2 = document.getElementById('userSelect2');
            users.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = user.name;
                userSelect2.appendChild(option);
            });

            const yearSelect2 = document.getElementById('yearSelect2');
            years.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect2.appendChild(option);
            });

            renderCharts();
        }

        document.addEventListener('DOMContentLoaded', initializeDropdowns);
    </script>
}
